From 8c9c2a26dd4dc7ce51c8d3d57f1a977d5db776ae Mon Sep 17 00:00:00 2001
From: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date: Fri, 21 Aug 2020 19:22:20 -0700
Subject: [PATCH 098/134] Change warn and error messages to info level

With adaptive option by default some platforms will fail to start
in adaptive option. So it will display error. Some users may have
issue with these messages.

(cherry picked from commit 3f0a87c21720259a5816ce58fd5048df0908eeb5)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
(cherry picked from commit 53fa91980bb2bbd008ad6a2a6f73e4ec4a008915)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
---
 src/thd_engine_adaptive.cpp |  2 +-
 src/thd_sys_fs.cpp          | 36 ++++++++++++++++++------------------
 2 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/src/thd_engine_adaptive.cpp b/src/thd_engine_adaptive.cpp
index 82a290d..acae7d4 100644
--- a/src/thd_engine_adaptive.cpp
+++ b/src/thd_engine_adaptive.cpp
@@ -1416,7 +1416,7 @@ int thd_engine_create_adaptive_engine(bool ignore_cpuid_check) {
 
 	// Initialize thermald objects
 	if (thd_engine->thd_engine_start(ignore_cpuid_check) != THD_SUCCESS) {
-		thd_log_error("THD engine start failed\n");
+		thd_log_info("THD engine start failed\n");
 		return THD_ERROR;
 	}
 
diff --git a/src/thd_sys_fs.cpp b/src/thd_sys_fs.cpp
index a195f6b..05df47a 100644
--- a/src/thd_sys_fs.cpp
+++ b/src/thd_sys_fs.cpp
@@ -30,13 +30,13 @@ int csys_fs::write(const std::string &path, const std::string &buf) {
 	std::string p = base_path + path;
 	int fd = ::open(p.c_str(), O_WRONLY);
 	if (fd < 0) {
-		thd_log_warn("sysfs write failed %s\n", p.c_str());
+		thd_log_info("sysfs write failed %s\n", p.c_str());
 		return -errno;
 	}
 	int ret = ::write(fd, buf.c_str(), buf.size());
 	if (ret < 0) {
 		ret = -errno;
-		thd_log_warn("sysfs write failed %s\n", p.c_str());
+		thd_log_info("sysfs write failed %s\n", p.c_str());
 	}
 	close(fd);
 
@@ -48,17 +48,17 @@ long long data) {
 	std::string p = base_path + path;
 	int fd = ::open(p.c_str(), O_WRONLY);
 	if (fd < 0) {
-		thd_log_warn("sysfs write failed %s\n", p.c_str());
+		thd_log_info("sysfs write failed %s\n", p.c_str());
 		return -errno;
 	}
 	if (::lseek(fd, position, SEEK_CUR) == -1) {
-		thd_log_warn("sysfs write failed %s\n", p.c_str());
+		thd_log_info("sysfs write failed %s\n", p.c_str());
 		close(fd);
 		return -errno;
 	}
 	int ret = ::write(fd, &data, sizeof(data));
 	if (ret < 0)
-		thd_log_warn("sysfs write failed %s\n", p.c_str());
+		thd_log_info("sysfs write failed %s\n", p.c_str());
 	close(fd);
 
 	return ret;
@@ -75,13 +75,13 @@ int csys_fs::read(const std::string &path, char *buf, int len) {
 	int fd = ::open(p.c_str(), O_RDONLY);
 	int orig_len = len;
 	if (fd < 0) {
-		thd_log_warn("sysfs read failed %s\n", p.c_str());
+		thd_log_info("sysfs read failed %s\n", p.c_str());
 		return -errno;
 	}
 	while (len > 0) {
 		int ret = ::read(fd, buf, len);
 		if (ret < 0) {
-			thd_log_warn("sysfs read failed %s\n", p.c_str());
+			thd_log_info("sysfs read failed %s\n", p.c_str());
 			close(fd);
 			return ret;
 		}
@@ -98,17 +98,17 @@ int csys_fs::read(const std::string &path, unsigned int position, char *buf,
 	std::string p = base_path + path;
 	int fd = ::open(p.c_str(), O_RDONLY);
 	if (fd < 0) {
-		thd_log_warn("sysfs read failed %s\n", p.c_str());
+		thd_log_info("sysfs read failed %s\n", p.c_str());
 		return -errno;
 	}
 	if (::lseek(fd, position, SEEK_CUR) == -1) {
-		thd_log_warn("sysfs read failed %s\n", p.c_str());
+		thd_log_info("sysfs read failed %s\n", p.c_str());
 		close(fd);
 		return -errno;
 	}
 	int ret = ::read(fd, buf, len);
 	if (ret < 0)
-		thd_log_warn("sysfs read failed %s\n", p.c_str());
+		thd_log_info("sysfs read failed %s\n", p.c_str());
 	close(fd);
 
 	return ret;
@@ -121,7 +121,7 @@ int csys_fs::read(const std::string &path, int *ptr_val) {
 
 	int fd = ::open(p.c_str(), O_RDONLY);
 	if (fd < 0) {
-		thd_log_warn("sysfs open failed %s\n", p.c_str());
+		thd_log_info("sysfs open failed %s\n", p.c_str());
 		return -errno;
 	}
 	ret = ::read(fd, str, sizeof(str));
@@ -141,14 +141,14 @@ int csys_fs::read(const std::string &path, unsigned long *ptr_val) {
 
 	int fd = ::open(p.c_str(), O_RDONLY);
 	if (fd < 0) {
-		thd_log_warn("sysfs read failed %s\n", p.c_str());
+		thd_log_info("sysfs read failed %s\n", p.c_str());
 		return -errno;
 	}
 	ret = ::read(fd, str, sizeof(str));
 	if (ret > 0)
 		*ptr_val = atol(str);
 	else
-		thd_log_warn("sysfs read failed %s\n", p.c_str());
+		thd_log_info("sysfs read failed %s\n", p.c_str());
 	close(fd);
 
 	return ret;
@@ -163,18 +163,18 @@ int csys_fs::read(const std::string &path, std::string &buf) {
 #endif
 		std::ifstream f(p.c_str(), std::fstream::in);
 		if (f.fail()) {
-			thd_log_warn("sysfs read failed %s\n", p.c_str());
+			thd_log_info("sysfs read failed %s\n", p.c_str());
 			return -EINVAL;
 		}
 		f >> buf;
 		if (f.bad()) {
-			thd_log_warn("sysfs read failed %s\n", p.c_str());
+			thd_log_info("sysfs read failed %s\n", p.c_str());
 			ret = -EIO;
 		}
 		f.close();
 #ifndef ANDROID
 	} catch (...) {
-		thd_log_warn("csys_fs::read exception %s\n", p.c_str());
+		thd_log_info("csys_fs::read exception %s\n", p.c_str());
 
 		ret = -EIO;
 	}
@@ -201,7 +201,7 @@ int csys_fs::create() {
 
 	int fd = ::open(base_path.c_str(), O_CREAT | O_WRONLY | O_TRUNC, S_IRWXU);
 	if (fd < 0) {
-		thd_log_warn("sysfs create failed %s\n", base_path.c_str());
+		thd_log_info("sysfs create failed %s\n", base_path.c_str());
 		return -errno;
 	}
 	close(fd);
@@ -227,7 +227,7 @@ int csys_fs::read_symbolic_link_value(const std::string &path, char *buf,
 	int ret = ::readlink(p.c_str(), buf, len);
 	if (ret < 0) {
 		*buf = '\0';
-		thd_log_warn("read_symbolic_link %s\n", path.c_str());
+		thd_log_info("read_symbolic_link %s\n", path.c_str());
 		return -errno;
 	}
 	buf[ret] = '\0';
-- 
2.27.0

