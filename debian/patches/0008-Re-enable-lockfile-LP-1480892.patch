From 834c7c2c326dacd707bc3aca8b42f486b212d433 Mon Sep 17 00:00:00 2001
From: Colin Ian King <colin.king@canonical.com>
Date: Mon, 3 Aug 2015 13:24:32 +0100
Subject: [PATCH 8/9] Re-enable lockfile (LP:# 1480892)

The lock file is no longer working, this was caused by adding
a close() on the lock file fd on a CoverityScan cleanup on
commit 97b1720a42f33fd21e6fbf30b6b3857a948e5633
("Fix Coverity error in release").  This fix re-works the lockfile
so that it is only closed on thermal exit so that the lock is held
during the lifetime of thermald, and also the lock file is unlinked
on thermald exit to clean itself up properly.

Signed-off-by: Colin Ian King <colin.king@canonical.com>
---
 src/main.cpp | 29 ++++++++++++++++++++---------
 1 file changed, 20 insertions(+), 9 deletions(-)

diff --git a/src/main.cpp b/src/main.cpp
index ac02f79..e66dad3 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -52,6 +52,10 @@
 
 extern int thd_dbus_server_init(void (*exit_handler)(int));
 
+// Lock file
+static int lock_file_handle = -1;
+static const char *lock_file = TDRUNDIR "/thermald.pid";
+
 // Default log level
 static int thd_log_level = G_LOG_LEVEL_ERROR | G_LOG_LEVEL_CRITICAL
 		| G_LOG_LEVEL_WARNING | G_LOG_LEVEL_MESSAGE | G_LOG_LEVEL_INFO;
@@ -105,27 +109,29 @@ void thd_logger(const gchar *log_domain, GLogLevelFlags log_level,
 		g_print("%s", message);
 }
 
+void clean_up_lockfile(void) {
+	if (lock_file_handle != -1) {
+		(void)close(lock_file_handle);
+		(void)unlink(lock_file);
+	}
+}
+
 bool check_thermald_running() {
-	const char *lock_file = TDRUNDIR
-	"/thermald.pid";
-	int pid_file_handle;
 
-	pid_file_handle = open(lock_file, O_RDWR | O_CREAT, 0600);
-	if (pid_file_handle == -1) {
+	lock_file_handle = open(lock_file, O_RDWR | O_CREAT, 0600);
+	if (lock_file_handle == -1) {
 		/* Couldn't open lock file */
 		thd_log_error("Could not open PID lock file %s, exiting\n", lock_file);
 		return false;
 	}
 	/* Try to lock file */
-	if (lockf(pid_file_handle, F_TLOCK, 0) == -1) {
+	if (lockf(lock_file_handle, F_TLOCK, 0) == -1) {
 		/* Couldn't get lock on lock file */
 		thd_log_error("Couldn't get lock file %d\n", getpid());
-		close(pid_file_handle);
+		close(lock_file_handle);
 		return true;
 	}
 
-	close(pid_file_handle);
-
 	return false;
 }
 
@@ -136,6 +142,7 @@ void sig_int_handler(int signum) {
 	if (g_main_loop)
 		g_main_loop_quit(g_main_loop);
 	delete thd_engine;
+	clean_up_lockfile();
 	exit(EXIT_SUCCESS);
 }
 
@@ -258,6 +265,7 @@ int main(int argc, char *argv[]) {
 	// Create a main loop that will dispatch callbacks
 	g_main_loop = g_main_loop_new(NULL, FALSE);
 	if (g_main_loop == NULL) {
+		clean_up_lockfile();
 		thd_log_error("Couldn't create GMainLoop:\n");
 		return THD_FATAL_ERROR;
 	}
@@ -272,6 +280,7 @@ int main(int argc, char *argv[]) {
 				TD_DIST_VERSION);
 
 		if (daemon(0, 0) != 0) {
+			clean_up_lockfile();
 			thd_log_error("Failed to daemonize.\n");
 			return THD_FATAL_ERROR;
 		}
@@ -279,6 +288,7 @@ int main(int argc, char *argv[]) {
 
 	if (thd_engine_create_default_engine((bool)ignore_cpuid_check,
 			(bool)exclusive_control) != THD_SUCCESS) {
+		clean_up_lockfile();
 		closelog();
 		exit(EXIT_FAILURE);
 	}
@@ -289,5 +299,6 @@ int main(int argc, char *argv[]) {
 	thd_log_warn("Oops g main loop exit..\n");
 
 	fprintf(stdout, "Exiting ..\n");
+	clean_up_lockfile();
 	closelog();
 }
-- 
2.5.0

