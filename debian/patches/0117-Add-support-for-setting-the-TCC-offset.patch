From 0fa899a41da50d471daa705e4116bd398f7f0c32 Mon Sep 17 00:00:00 2001
From: Matthew Garrett <mjg59@google.com>
Date: Tue, 14 Apr 2020 15:45:23 -0700
Subject: [PATCH 117/134] Add support for setting the TCC offset

This should reduce CPU-based thermal throttling

(cherry picked from commit c1ef2968b548eea69adfd982b1c4faf6adf5a9c2)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
(cherry picked from commit 643521b28ebc7c461599388a7a35d69a5a00823c)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
---
 src/thd_cdev_rapl.cpp | 11 +++++++++++
 src/thd_cdev_rapl.h   |  1 +
 2 files changed, 12 insertions(+)

diff --git a/src/thd_cdev_rapl.cpp b/src/thd_cdev_rapl.cpp
index affcaa5..25d1fd5 100644
--- a/src/thd_cdev_rapl.cpp
+++ b/src/thd_cdev_rapl.cpp
@@ -268,12 +268,23 @@ int cthd_sysfs_cdev_rapl::rapl_read_enable_status()
 
 }
 
+void cthd_sysfs_cdev_rapl::set_tcc(int tcc) {
+	csys_fs sysfs("/sys/bus/pci/devices/0000:00:04.0/");
+
+	if (!sysfs.exists("tcc_offset_degree_celsius"))
+		return;
+
+	sysfs.write("tcc_offset_degree_celsius", tcc);
+}
+
 void cthd_sysfs_cdev_rapl::set_adaptive_target(struct adaptive_target target) {
 	int argument = std::stoi(target.argument, NULL);
 	if (target.code == "PL1MAX") {
 		set_curr_state(argument * 1000, 1);
 	} else if (target.code == "PL1TimeWindow") {
 		rapl_update_time_window(argument * 1000);
+	} else if (target.code == "TccOffset") {
+		set_tcc(argument);
 	}
 }
 
diff --git a/src/thd_cdev_rapl.h b/src/thd_cdev_rapl.h
index 51b4899..eceb05e 100644
--- a/src/thd_cdev_rapl.h
+++ b/src/thd_cdev_rapl.h
@@ -97,6 +97,7 @@ public:
 	virtual int get_max_state();
 	virtual int update();
 	virtual void set_curr_state_raw(int state, int arg);
+	void set_tcc(int tcc);
 	void set_adaptive_target(struct adaptive_target target);
 	void thd_cdev_set_min_state_param(int arg);
 	int get_phy_max_state() {
-- 
2.27.0

