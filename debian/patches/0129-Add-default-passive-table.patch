From bade9243f9eec8010c624de1113bfe81b93f3dd7 Mon Sep 17 00:00:00 2001
From: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date: Fri, 20 Nov 2020 20:22:41 -0800
Subject: [PATCH 129/134] Add default passive table

When there are no adaptive table then add as a backup just
use default table before continuing to legacy mode.

(cherry picked from commit 2942ec19a2ef1ea045072148022d59ed8837b967)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
(cherry picked from commit b6782524dd3a4cbf0cf702b0c6fa5949c2c06f3f)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
---
 src/thd_engine_adaptive.cpp | 55 ++++++++++++++++++++++++++++++++++++-
 src/thd_engine_adaptive.h   |  9 ++++--
 2 files changed, 61 insertions(+), 3 deletions(-)

diff --git a/src/thd_engine_adaptive.cpp b/src/thd_engine_adaptive.cpp
index f25708f..bf7a346 100644
--- a/src/thd_engine_adaptive.cpp
+++ b/src/thd_engine_adaptive.cpp
@@ -586,6 +586,16 @@ void cthd_engine_adaptive::dump_psvt() {
 	thd_log_info("psvt dump end\n");
 }
 
+struct psvt* cthd_engine_adaptive::find_def_psvt() {
+	for (unsigned int i = 0; i < psvts.size(); ++i) {
+		if (psvts[i].name == "IETM.D0") {
+			return &psvts[i];
+		}
+	}
+
+	return NULL;
+}
+
 // From Common/esif_sdk_iface_esif.h:
 #define ESIF_SERVICE_CONFIG_COMPRESSED  0x40000000/* Payload is Compressed */
 // From Common/esif_sdk.h
@@ -1422,6 +1432,42 @@ void cthd_engine_adaptive::exec_fallback_target(int target){
 }
 
 void cthd_engine_adaptive::update_engine_state() {
+
+	if (passive_def_only) {
+		if (!passive_def_processed) {
+			thd_log_info("IETM_D0 processed\n");
+			passive_def_processed = 1;
+
+			for (unsigned int i = 0; i < zones.size(); ++i) {
+				cthd_zone *_zone = zones[i];
+				_zone->zone_reset(1);
+				_zone->trip_delete_all();
+
+				if (_zone && _zone->zone_active_status())
+					_zone->set_zone_inactive();
+			}
+
+			struct psvt *psvt = find_def_psvt();
+			if (!psvt)
+				return;
+
+			std::vector<struct psv> psvs = psvt->psvs;
+
+			thd_log_info("Name :%s\n", psvt->name.c_str());
+			for (unsigned int j = 0; j < psvs.size(); ++j) {
+				install_passive(&psvs[j]);
+			}
+
+			thd_log_info("\n\n ZONE DUMP BEGIN\n");
+			for (unsigned int i = 0; i < zones.size(); ++i) {
+				zones[i]->zone_dump();
+			}
+			thd_log_info("\n\n ZONE DUMP END\n");
+		}
+
+		return;
+	}
+
 	int target = evaluate_conditions();
 	if (target == -1) {
 		if (fallback_id >= 0 && !policy_active) {
@@ -1571,7 +1617,14 @@ int cthd_engine_adaptive::thd_engine_start(bool ignore_cpuid_check) {
 
 	if (!conditions.size()) {
 		thd_log_info("No adaptive conditions present\n");
-		return THD_ERROR;
+
+		struct psvt *psvt = find_def_psvt();
+
+		if (psvt) {
+			thd_log_info("IETM.D0 found\n");
+			passive_def_only = 1;
+		}
+		return cthd_engine::thd_engine_start(ignore_cpuid_check);
 	}
 
 	setup_input_devices();
diff --git a/src/thd_engine_adaptive.h b/src/thd_engine_adaptive.h
index 8954d3a..4f1a514 100644
--- a/src/thd_engine_adaptive.h
+++ b/src/thd_engine_adaptive.h
@@ -158,6 +158,8 @@ protected:
 	int policy_active;
 	int fallback_id;
 	std::string int3400_base_path;
+	int passive_def_only;
+	int passive_def_processed;
 
 	int get_type(char *object, int *offset);
 	uint64_t get_uint64(char *object, int *offset);
@@ -199,11 +201,14 @@ protected:
 	void dump_apct();
 	void dump_ppcc();
 	void dump_psvt();
+	struct psvt *find_def_psvt();
+
 public:
 	cthd_engine_adaptive() :
 			cthd_engine_default("63BE270F-1C11-48FD-A6F7-3AF253FF3E2D"), upower_client(
-					NULL), tablet_dev(NULL), current_condition_set(0xffff), policy_active(
-					0), fallback_id(-1), int3400_base_path("") {
+			NULL), tablet_dev(NULL), current_condition_set(0xffff), policy_active(
+					0), fallback_id(-1), int3400_base_path(""), passive_def_only(
+					0), passive_def_processed(0) {
 	}
 
 	~cthd_engine_adaptive();
-- 
2.27.0

