From 03532f162a64f5212ebd188852d7cfe60a2dd94f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timm=20B=C3=A4der?= <tbaeder@redhat.com>
Date: Thu, 3 Dec 2020 15:11:24 +0100
Subject: [PATCH 131/134] thd_engine_adapive: Change some struct field types

The condition and comparision fields of the condition struct are used
for arbitrary integer values, not just the ones in their respective enum
fields. Reflect this by using an integer type and not an enum type.

This fixes the build with clang.

Fixes #284

(cherry picked from commit 7e88aac9f31358ee80d66ee8d83df2aa9df2ce96)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
(cherry picked from commit bf2000d1e9edce4b2de362a332da7ed51ae7845a)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
---
 src/thd_engine_adaptive.cpp | 8 ++++----
 src/thd_engine_adaptive.h   | 4 ++--
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/thd_engine_adaptive.cpp b/src/thd_engine_adaptive.cpp
index 17ba0d3..fa7381d 100644
--- a/src/thd_engine_adaptive.cpp
+++ b/src/thd_engine_adaptive.cpp
@@ -845,7 +845,7 @@ int cthd_engine_adaptive::verify_condition(struct condition condition) {
 		return 0;
 
 	cond_name = condition_names[MIN(MAX(0, condition.condition), G_N_ELEMENTS(condition_names) - 1)];
-	thd_log_error("Unsupported condition %d (%s)\n", condition.condition, cond_name);
+	thd_log_error("Unsupported condition %" PRIu64 " (%s)\n", condition.condition, cond_name);
 	return THD_ERROR;
 }
 
@@ -879,11 +879,11 @@ int cthd_engine_adaptive::compare_condition(struct condition condition,
 						cond_name.c_str(), comp_str.c_str(), value);
 			} else {
 				thd_log_debug(
-						"compare condition [%s] comparison [%d] value [%d]\n",
+						"compare condition [%s] comparison [%" PRIu64 "] value [%d]\n",
 						cond_name.c_str(), condition.comparison, value);
 			}
 		} else {
-			thd_log_debug("compare condition %d value %d\n",
+			thd_log_debug("compare condition %" PRIu64 " value %d\n",
 					condition.comparison, value);
 		}
 	}
@@ -1045,7 +1045,7 @@ int cthd_engine_adaptive::evaluate_condition(struct condition condition) {
 	if (condition.condition == Default)
 		return THD_SUCCESS;
 
-	thd_log_debug("evaluate condition.condition %d\n", condition.condition);
+	thd_log_debug("evaluate condition.condition %" PRIu64 "\n", condition.condition);
 
 	if ((condition.condition >= Oem0 && condition.condition <= Oem5)
 			|| (condition.condition >= (adaptive_condition) 0x1000
diff --git a/src/thd_engine_adaptive.h b/src/thd_engine_adaptive.h
index 4f1a514..4922a4a 100644
--- a/src/thd_engine_adaptive.h
+++ b/src/thd_engine_adaptive.h
@@ -119,9 +119,9 @@ struct psv {
 };
 
 struct condition {
-	enum adaptive_condition condition;
+	uint64_t condition;
 	std::string device;
-	enum adaptive_comparison comparison;
+	uint64_t comparison;
 	int argument;
 	enum adaptive_operation operation;
 	enum adaptive_comparison time_comparison;
-- 
2.27.0

