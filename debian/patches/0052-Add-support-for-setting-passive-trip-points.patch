From 5da7005a2899fff92e6a1c319ef9d2a7e0ff019f Mon Sep 17 00:00:00 2001
From: Matthew Garrett <mjg59@google.com>
Date: Thu, 16 Apr 2020 15:47:46 -0700
Subject: [PATCH 052/134] Add support for setting passive trip points

The PSV action appears to indicate that the passive trip point for the
associated device should be updated, so try doing that.

(cherry picked from commit 7ec3f7d83765b1b052b39a1e90af4e885a699220)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
(cherry picked from commit 31780ae0f1fbe71e718fd4b553bc0eb8b1c0dd98)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
---
 src/thd_engine_adaptive.cpp | 38 +++++++++++++++++++++++++++++++++++++
 src/thd_engine_adaptive.h   |  1 +
 2 files changed, 39 insertions(+)

diff --git a/src/thd_engine_adaptive.cpp b/src/thd_engine_adaptive.cpp
index a20237c..f32c456 100644
--- a/src/thd_engine_adaptive.cpp
+++ b/src/thd_engine_adaptive.cpp
@@ -787,6 +787,41 @@ int cthd_engine_adaptive::install_passive(struct psv *psv) {
 	return 0;
 }
 
+void cthd_engine_adaptive::set_trip(std::string target, std::string argument) {
+	std::string psv_zone;
+	float float_temp = stof(argument, NULL);
+	int temp = (int)(float_temp * 1000);
+
+	size_t pos = target.find_last_of(".");
+
+	if (pos == std::string::npos)
+		psv_zone = target;
+	else
+		psv_zone = target.substr(pos + 1);
+
+	while (psv_zone.back() == '_') {
+		psv_zone.pop_back();
+	}
+
+	cthd_zone *zone = search_zone(psv_zone);
+	if (!zone) {
+		thd_log_warn("Unable to find a zone for %s\n", psv_zone.c_str());
+		return;
+	}
+
+	int index = 0;
+	cthd_trip_point *trip = zone->get_trip_at_index(index);
+	while (trip != NULL) {
+		if (trip->get_trip_type() == PASSIVE) {
+			trip->update_trip_temp(temp);
+			return;
+		}
+		index++;
+		trip = zone->get_trip_at_index(index);
+	}
+	thd_log_warn("Unable to find a passive trippoint for %s\n", target.c_str());
+}
+
 void cthd_engine_adaptive::set_int3400_target(struct adaptive_target target) {
 	struct psvt *psvt;
 	if (target.code == "PSVT") {
@@ -798,6 +833,9 @@ void cthd_engine_adaptive::set_int3400_target(struct adaptive_target target) {
 			install_passive(&psvt->psvs[i]);
 		}
 	}
+	if (target.code == "PSV") {
+		set_trip(target.participant, target.argument);
+	}
 }
 
 void cthd_engine_adaptive::execute_target(struct adaptive_target target) {
diff --git a/src/thd_engine_adaptive.h b/src/thd_engine_adaptive.h
index 77790bf..ed92fb5 100644
--- a/src/thd_engine_adaptive.h
+++ b/src/thd_engine_adaptive.h
@@ -165,6 +165,7 @@ protected:
 	int parse_gddv(char *buf, int size);
 	struct psvt *find_psvt(std::string name);
 	int install_passive(struct psv *psv);
+	void set_trip(std::string device, std::string argument);
 	void set_int3400_target(struct adaptive_target target);
 	int verify_condition(struct condition condition);
 	int verify_conditions();
-- 
2.27.0

