From 5f9f81c7bdcd6c008cfc8bc83eccf84209418293 Mon Sep 17 00:00:00 2001
From: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date: Tue, 20 Oct 2015 09:13:00 -0700
Subject: [PATCH] Add new option for config file

Added option so that config file can be provided via command line
option.
---
 src/android_main.cpp       |  4 ++--
 src/main.cpp               | 15 ++++++++-------
 src/thd_dbus_interface.cpp |  9 ++++++++-
 src/thd_engine.h           |  7 +++++++
 src/thd_engine_default.cpp |  7 +++++--
 src/thd_engine_default.h   |  3 +--
 src/thd_parse.cpp          | 25 ++++++++++++++++---------
 src/thd_parse.h            |  2 +-
 8 files changed, 48 insertions(+), 24 deletions(-)

diff --git a/src/android_main.cpp b/src/android_main.cpp
index 39d4155..96dc046 100644
--- a/src/android_main.cpp
+++ b/src/android_main.cpp
@@ -213,8 +213,8 @@ int main(int argc, char *argv[]) {
 			"Linux Thermal Daemon is starting mode %d : poll_interval %d :ex_control %d\n",
 			no_daemon, thd_poll_interval, exclusive_control);
 
-	if (thd_engine_create_default_engine(false,
-			exclusive_control) != THD_SUCCESS) {
+	if (thd_engine_create_default_engine(false, exclusive_control,
+			NULL) != THD_SUCCESS) {
 		exit(EXIT_FAILURE);
 	}
 
diff --git a/src/main.cpp b/src/main.cpp
index 2b1befb..b04b04e 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -111,8 +111,8 @@ void thd_logger(const gchar *log_domain, GLogLevelFlags log_level,
 
 void clean_up_lockfile(void) {
 	if (lock_file_handle != -1) {
-		(void)close(lock_file_handle);
-		(void)unlink(lock_file);
+		(void) close(lock_file_handle);
+		(void) unlink(lock_file);
 	}
 }
 
@@ -153,6 +153,7 @@ int main(int argc, char *argv[]) {
 	gboolean log_debug = FALSE;
 	gboolean no_daemon = FALSE;
 	gboolean test_mode = FALSE;
+	gchar *conf_file = NULL;
 	gint poll_interval = -1;
 	gboolean success;
 	GOptionContext *opt_ctx;
@@ -178,9 +179,9 @@ int main(int argc, char *argv[]) {
 			G_OPTION_ARG_NONE, &exclusive_control, N_(
 					"Take over thermal control from kernel thermal driver."),
 			NULL }, { "ignore-cpuid-check", 0, 0, G_OPTION_ARG_NONE,
-			&ignore_cpuid_check, N_("Ignore CPU ID check."), NULL },
-
-	{ NULL } };
+			&ignore_cpuid_check, N_("Ignore CPU ID check."), NULL }, {
+			"config-file", 0, 0, G_OPTION_ARG_STRING, &conf_file, N_(
+					"configuration file"), NULL }, { NULL } };
 
 	if (!g_module_supported()) {
 		fprintf(stderr, "GModules are not supported on your platform!\n");
@@ -286,8 +287,8 @@ int main(int argc, char *argv[]) {
 		}
 	}
 
-	if (thd_engine_create_default_engine((bool)ignore_cpuid_check,
-			(bool)exclusive_control) != THD_SUCCESS) {
+	if (thd_engine_create_default_engine((bool) ignore_cpuid_check,
+			(bool) exclusive_control, conf_file) != THD_SUCCESS) {
 		clean_up_lockfile();
 		closelog();
 		exit(EXIT_FAILURE);
diff --git a/src/thd_dbus_interface.cpp b/src/thd_dbus_interface.cpp
index 8fe974c..daa7849 100644
--- a/src/thd_dbus_interface.cpp
+++ b/src/thd_dbus_interface.cpp
@@ -205,7 +205,14 @@ gboolean thd_dbus_interface_reinit(PrefObject *obj, GError **error) {
 	sleep(2);
 	if (thd_engine->get_control_mode() == EXCLUSIVE)
 		exclusive_control = true;
-	if (thd_engine_create_default_engine(true, exclusive_control) != THD_SUCCESS) {
+
+	std::string config_file = thd_engine->get_config_file();
+	const char *conf_file = NULL;
+	if (!config_file.empty())
+		conf_file = config_file.c_str();
+
+	if (thd_engine_create_default_engine(true, exclusive_control,
+			conf_file) != THD_SUCCESS) {
 		return FALSE;
 	}
 
diff --git a/src/thd_engine.h b/src/thd_engine.h
index 89dc383..2f23466 100644
--- a/src/thd_engine.h
+++ b/src/thd_engine.h
@@ -100,6 +100,7 @@ private:
 	int poll_interval_sec;
 	cthd_preference thd_pref;
 	unsigned int poll_sensor_mask;
+	std::string config_file;
 
 	pthread_t thd_engine;
 	pthread_attr_t thd_attr;
@@ -208,6 +209,12 @@ public:
 	int get_preference() {
 		return preference;
 	}
+	void set_config_file(std::string conf_file) {
+		config_file = conf_file;
+	}
+	std::string get_config_file() {
+		return config_file;
+	}
 	cthd_zone *search_zone(std::string name);
 	cthd_cdev *search_cdev(std::string name);
 	cthd_sensor *search_sensor(std::string name);
diff --git a/src/thd_engine_default.cpp b/src/thd_engine_default.cpp
index 1ebee6e..cac300a 100644
--- a/src/thd_engine_default.cpp
+++ b/src/thd_engine_default.cpp
@@ -69,7 +69,7 @@ cthd_engine_default::~cthd_engine_default() {
 int cthd_engine_default::parser_init() {
 	if (parser_init_done)
 		return THD_SUCCESS;
-	if (parser.parser_init() == THD_SUCCESS) {
+	if (parser.parser_init(get_config_file()) == THD_SUCCESS) {
 		if (parser.start_parse() == THD_SUCCESS) {
 			parser.dump_thermal_conf();
 			parser_init_done = true;
@@ -621,13 +621,16 @@ int cthd_engine_default::read_cooling_devices() {
 cthd_engine *thd_engine;
 
 int thd_engine_create_default_engine(bool ignore_cpuid_check,
-		bool exclusive_control) {
+		bool exclusive_control, const char *conf_file) {
 	thd_engine = new cthd_engine_default();
 	if (exclusive_control)
 		thd_engine->set_control_mode(EXCLUSIVE);
 
 	// Initialize thermald objects
 	thd_engine->set_poll_interval(thd_poll_interval);
+	if (conf_file)
+		thd_engine->set_config_file(conf_file);
+
 	if (thd_engine->thd_engine_start(ignore_cpuid_check) != THD_SUCCESS) {
 		thd_log_error("THD engine start failed\n");
 		return THD_ERROR;
diff --git a/src/thd_engine_default.h b/src/thd_engine_default.h
index 6041626..8f0b58a 100644
--- a/src/thd_engine_default.h
+++ b/src/thd_engine_default.h
@@ -50,6 +50,5 @@ public:
 };
 
 int thd_engine_create_default_engine(bool ignore_cpuid_check,
-		bool exclusive_control);
-
+		bool exclusive_control, const char *config_file);
 #endif /* THD_ENGINE_DEFAULT_H_ */
diff --git a/src/thd_parse.cpp b/src/thd_parse.cpp
index 1c9ccc2..5c35f04 100644
--- a/src/thd_parse.cpp
+++ b/src/thd_parse.cpp
@@ -46,9 +46,9 @@ void cthd_parse::string_trim(std::string &str) {
 // Very simple version just checking for 0x20 not other white space chars
 bool isspace(int c) {
 	if (c == ' ')
-		return true;
+	return true;
 	else
-		return false;
+	return false;
 }
 #endif
 
@@ -76,19 +76,26 @@ cthd_parse::cthd_parse() :
 	filename_auto = name_run + "/" + "thermal-conf.xml.auto";
 }
 
-int cthd_parse::parser_init() {
+int cthd_parse::parser_init(std::string config_file) {
 	cthd_acpi_rel rel;
+	const char *xml_config_file;
 	int ret;
 
-	ret = rel.generate_conf(filename_auto);
-	if (!ret) {
-		thd_log_warn("Using generated %s\n", filename_auto.c_str());
-		doc = xmlReadFile(filename_auto.c_str(), NULL, 0);
+	if (config_file.empty()) {
+		ret = rel.generate_conf(filename_auto);
+		if (!ret) {
+			thd_log_warn("Using generated %s\n", filename_auto.c_str());
+			xml_config_file = filename_auto.c_str();
+		} else {
+			xml_config_file = filename.c_str();
+		}
 	} else {
-		doc = xmlReadFile(filename.c_str(), NULL, 0);
+		xml_config_file = config_file.c_str();
 	}
+
+	doc = xmlReadFile(xml_config_file, NULL, 0);
 	if (doc == NULL) {
-		thd_log_warn("error: could not parse file %s\n", filename.c_str());
+		thd_log_warn("error: could not parse file %s\n", xml_config_file);
 		return THD_ERROR;
 	}
 	root_element = xmlDocGetRootElement(doc);
diff --git a/src/thd_parse.h b/src/thd_parse.h
index 7570c9a..ecb382b 100644
--- a/src/thd_parse.h
+++ b/src/thd_parse.h
@@ -162,7 +162,7 @@ private:
 
 public:
 	cthd_parse();
-	int parser_init();
+	int parser_init(std::string config_file);
 	void parser_deinit();
 	int start_parse();
 	void dump_thermal_conf();
-- 
2.7.0.rc3

