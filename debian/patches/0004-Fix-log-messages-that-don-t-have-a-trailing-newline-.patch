From 6570acdf2166f65dc5d5ad1c46ee067ff42e9f33 Mon Sep 17 00:00:00 2001
From: Colin Ian King <colin.king@canonical.com>
Date: Tue, 21 Jan 2014 12:34:53 +0000
Subject: [PATCH 2/3] Fix log messages that don't have a trailing newline at
 end

Some of the log messages are not emitting a newline, which makes
the output confusing when several of these are emitted.

Signed-off-by: Colin Ian King <colin.king@canonical.com>
---
 src/android_main.cpp |  6 +++---
 src/main.cpp         | 12 ++++++------
 src/thd_engine.cpp   | 10 +++++-----
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/src/android_main.cpp b/src/android_main.cpp
index 64530cb..3f35267 100644
--- a/src/android_main.cpp
+++ b/src/android_main.cpp
@@ -60,7 +60,7 @@ static void signal_handler(int sig) {
 		exit(EXIT_SUCCESS);
 		break;
 	default:
-		thd_log_warn("Unhandled signal %s", strsignal(sig));
+		thd_log_warn("Unhandled signal %s\n", strsignal(sig));
 		break;
 	}
 }
@@ -117,7 +117,7 @@ static void daemonize(char *rundir, char *pidfile) {
 	pid_file_handle = open(pidfile, O_RDWR | O_CREAT, 0600);
 	if (pid_file_handle == -1) {
 		/* Couldn't open lock file */
-		thd_log_info("Could not open PID lock file %s, exiting", pidfile);
+		thd_log_info("Could not open PID lock file %s, exiting\n", pidfile);
 		exit(EXIT_FAILURE);
 	}
 	/* Try to lock file */
@@ -225,7 +225,7 @@ int main(int argc, char *argv[]) {
 
 	// Initialize thermald objects
 	if (thd_engine->thd_engine_start(false) != THD_SUCCESS) {
-		thd_log_error("thermald engine start failed: ");
+		thd_log_error("thermald engine start failed:\n");
 		exit(EXIT_FAILURE);
 	}
 #ifdef VALGRIND_TEST
diff --git a/src/main.cpp b/src/main.cpp
index 05185e4..a026501 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -222,13 +222,13 @@ static int thd_dbus_server_proc(gboolean no_daemon) {
 	// Create a main loop that will dispatch callbacks
 	g_main_loop = main_loop = g_main_loop_new(NULL, FALSE);
 	if (main_loop == NULL) {
-		thd_log_error("Couldn't create GMainLoop:");
+		thd_log_error("Couldn't create GMainLoop:\n");
 		return THD_FATAL_ERROR;
 	}
 	if (dbus_enable) {
 		bus = dbus_g_bus_get(DBUS_BUS_SYSTEM, &error);
 		if (error != NULL) {
-			thd_log_error("Couldn't connect to session bus: %s:",
+			thd_log_error("Couldn't connect to session bus: %s:\n",
 					error->message);
 			return THD_FATAL_ERROR;
 		}
@@ -237,7 +237,7 @@ static int thd_dbus_server_proc(gboolean no_daemon) {
 		bus_proxy = dbus_g_proxy_new_for_name(bus, DBUS_SERVICE_DBUS,
 				DBUS_PATH_DBUS, DBUS_INTERFACE_DBUS);
 		if (bus_proxy == NULL) {
-			thd_log_error("Failed to get a proxy for D-Bus:");
+			thd_log_error("Failed to get a proxy for D-Bus:\n");
 			return THD_FATAL_ERROR;
 		}
 
@@ -252,12 +252,12 @@ static int thd_dbus_server_proc(gboolean no_daemon) {
 		}
 		thd_log_debug("RequestName returned %d.\n", result);
 		if (result != DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER) {
-			thd_log_error("Failed to get the primary well-known name:");
+			thd_log_error("Failed to get the primary well-known name:\n");
 			return THD_FATAL_ERROR;
 		}
 		value_obj = (PrefObject*) g_object_new(PREF_TYPE_OBJECT, NULL);
 		if (value_obj == NULL) {
-			thd_log_error("Failed to create one Value instance:");
+			thd_log_error("Failed to create one Value instance:\n");
 			return THD_FATAL_ERROR;
 		}
 
@@ -284,7 +284,7 @@ static int thd_dbus_server_proc(gboolean no_daemon) {
 	// Initialize thermald objects
 	thd_engine->set_poll_interval(thd_poll_interval);
 	if (thd_engine->thd_engine_start(ignore_cpuid_check) != THD_SUCCESS) {
-		thd_log_error("THD engine start failed: ");
+		thd_log_error("THD engine start failed:\n");
 		closelog();
 		exit(EXIT_FAILURE);
 	}
diff --git a/src/thd_engine.cpp b/src/thd_engine.cpp
index 2d04dbf..d1ceba5 100644
--- a/src/thd_engine.cpp
+++ b/src/thd_engine.cpp
@@ -150,7 +150,7 @@ int cthd_engine::thd_engine_start(bool ignore_cpuid_check) {
 	// Pipe is used for communication between two processes
 	ret = pipe(wake_fds);
 	if (ret) {
-		thd_log_error("Thermal sysfs: pipe creation failed %d: ", ret);
+		thd_log_error("Thermal sysfs: pipe creation failed %d:\n", ret);
 		return THD_FATAL_ERROR;
 	}
 	fcntl(wake_fds[0], F_SETFL, O_NONBLOCK);
@@ -171,21 +171,21 @@ int cthd_engine::thd_engine_start(bool ignore_cpuid_check) {
 
 	ret = read_thermal_sensors();
 	if (ret != THD_SUCCESS) {
-		thd_log_error("Thermal sysfs Error in reading sensors");
+		thd_log_error("Thermal sysfs Error in reading sensors\n");
 		// This is a fatal error and daemon will exit
 		return THD_FATAL_ERROR;
 	}
 
 	ret = read_cooling_devices();
 	if (ret != THD_SUCCESS) {
-		thd_log_error("Thermal sysfs Error in reading cooling devs");
+		thd_log_error("Thermal sysfs Error in reading cooling devs\n");
 		// This is a fatal error and daemon will exit
 		return THD_FATAL_ERROR;
 	}
 
 	ret = read_thermal_zones();
 	if (ret != THD_SUCCESS) {
-		thd_log_error("No thermal sensors found");
+		thd_log_error("No thermal sensors found\n");
 		// This is a fatal error and daemon will exit
 		return THD_FATAL_ERROR;
 	}
@@ -529,7 +529,7 @@ void cthd_engine::thd_engine_reload_zones() {
 
 	int ret = read_thermal_zones();
 	if (ret != THD_SUCCESS) {
-		thd_log_error("No thermal sensors found");
+		thd_log_error("No thermal sensors found\n");
 		// This is a fatal error and daemon will exit
 		return;
 	}
-- 
1.8.5.3

